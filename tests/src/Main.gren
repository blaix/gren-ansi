module Main exposing (main)


import Ansi exposing (width)
import Expect
import Fuzz exposing (Fuzzer)
import Test exposing (describe, fuzz2, fuzz3, test)
import Test.Runner.Node exposing (Program, run)


width0 : Fuzzer String
width0 =
    Fuzz.oneOfValues
        [ ""
        , Ansi.setItalic
        , Ansi.wrapItalic ""
        , Ansi.getCursorReport
        , Ansi.setBgColor Ansi.Yellow
        , Ansi.arrowDown ++ Ansi.setColor Ansi.Blue
        , Ansi.wrapUnderline (Ansi.wrapStrikeThrough "")
        ]


width5 : Fuzzer String
width5 =
    Fuzz.asciiStringOfLength 5


main : Program
main =
    run <|
        describe "width"
            [ fuzz3 width0 width0 width0 "Zero width" <| 
                \zero1 zero2 zero3 ->
                    [ width <| zero1
                    , width <| zero2 ++ ""
                    , width <| "" ++ zero3
                    , width <| zero1 ++ zero2
                    , width <| zero1 ++ "" ++ zero2
                    , width <| zero1 ++ zero2 ++ zero3
                    ]
                        |> Expect.equalArrays
                            [ 0, 0, 0, 0, 0, 0 ]

            , fuzz2 width5 width0 "Greater than zero width" <| 
                \five zero -> 
                    [ width <| five
                    , width <| zero ++ five
                    , width <| five ++ zero
                    , width <| zero ++ five ++ zero
                    , width <| Ansi.wrapColor Ansi.Green five
                    , width <| zero ++ five ++ zero ++ zero ++ five
                    ]
                        |> Expect.equalArrays
                            [ 5, 5, 5, 5, 5, 10 ]
            ]
