module Ansi exposing
    ( escape
    , prefix

    -- Color
    , Color(..)
    , wrapColor
    , wrapBgColor
    , setColor
    , setBgColor
    , unsetColor
    , unsetBgColor

    -- Cursor
    , moveUpLines
    , moveDownLines
    , moveTo
    , showCursor
    , hideCursor
    , getCursorReport

    -- Keys
    , arrowUp
    , arrowDown
    , arrowLeft
    , arrowRight

    -- Font styling
    , FontWeight(..)
    , wrapFontWeight
    , setFontWeight
    , unsetFontWeight
    , wrapItalic
    , wrapUnderline
    , wrapStrikeThrough
    , setItalic
    , unsetItalic
    , setUnderline
    , unsetUnderline
    , setStrikeThrough
    , unsetStrikeThrough
    , reset

    -- Util
    , width
    )


{-| Functions to control the screen, cursor, and text in the terminal using ANSI escape sequences.

    import Ansi
    import Stream exposing (Stream)

    coolGreeting : Stream -> Cmd msg
    coolGreeting stdout =
        "Hello!"
            |> Ansi.wrapItalic
            |> Ansi.wrapColor Ansi.Green
            |> Stream.sendLine stdout

## Colors

@docs Color, wrapColor, wrapBgColor, setColor, unsetColor, setBgColor, unsetBgColor

## Styling

@docs FontWeight, wrapFontWeight, setFontWeight, unsetFontWeight, wrapItalic, wrapUnderline, wrapStrikeThrough, setItalic, unsetItalic, setUnderline, unsetUnderline, setStrikeThrough, unsetStrikeThrough, reset

## Controlling the Cursor

@docs moveUpLines, moveDownLines, moveTo, showCursor, hideCursor, getCursorReport

## Arrow Keys

Use these functions if you are reading stdin and want to see if an arrow key was pressed.

@docs arrowUp, arrowDown, arrowLeft, arrowRight

## Helpers

@docs width, prefix, escape

-}


import String.Regex as Regex exposing (Regex)


{-| The beginning of most ANSI escape sequences (The `\e[` part).

Use this to define your own ansi functions.
For example, `setItalic` is defined like this:

    setItalic : String
    setItalic =
        prefix ++ "3m"

You can look up escape sequences [here](https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797)
or [here](https://en.wikipedia.org/wiki/ANSI_escape_code).

If you create functions you think should be included in the package I'd love it if you sent a [pull request](https://github.com/blaix/gren-ansi/pulls).
-}
prefix : String
prefix =
    escape ++ "["


{-| Unicode character for Escape (Esc).

You would use this if you needed to compare or parse a string holding an escape sequence.
-}
escape : String
escape =
    "\u{001b}"


-- COLOR


{-| -}
type Color
    = NoColor
    | Black
    | Red
    | Green
    | Yellow
    | Blue
    | Magenta
    | Cyan
    | White


{-| Display text in the given [color](#Color).

This will return the string with a "set color" sequence at the beginning and a
"no color" sequence at the end.
-}
wrapColor : Color -> String -> String
wrapColor color string =
    String.join ""
        [ setColor color
        , string
        , setColor NoColor
        ]


{-| Display text with the given background [color](#Color).

This will return the string with a "set background color" sequence at the
beginning and a "default background color" sequence at the end.
-}
wrapBgColor : Color -> String -> String
wrapBgColor color string =
    String.join ""
        [ setBgColor color
        , string
        , setBgColor NoColor
        ]


{-| Change all subsequent terminal output to the given [color](#Color).

This will persist even after program exit!
So be sure to call [`unsetColor`](#unsetColor) before exiting.
-}
setColor : Color -> String
setColor color =
    String.join ""
        [ prefix
        , colorCode color
        , "m"
        ]


{-| Change all subsequent terminal output to the default term color.
-}
unsetColor : String
unsetColor =
    setColor NoColor


{-| Change background of all subsequent terminal output to the given [color](#Color).

This will persist even after program exit!
So be sure to call [`unsetBgColor`](#unsetBgColor) before exiting.
-}
setBgColor : Color -> String
setBgColor color =
    String.join ""
        [ prefix
        , bgColorCode color
        , "m"
        ]


{-| Change background of all subsequent terminal output to the default term color.
-}
unsetBgColor : String
unsetBgColor =
    setBgColor NoColor


colorCode : Color -> String
colorCode color_ =
    when color_ is
        NoColor -> "39"
        Black -> "30"
        Red -> "31"
        Green -> "32"
        Yellow -> "33"
        Blue -> "34"
        Magenta -> "35"
        Cyan -> "36"
        White -> "37"


bgColorCode : Color -> String
bgColorCode color_ =
    when color_ is
        NoColor -> "49"
        Black -> "40"
        Red -> "41"
        Green -> "42"
        Yellow -> "43"
        Blue -> "44"
        Magenta -> "45"
        Cyan -> "46"
        White -> "47"


-- FONT STYLING


{-| -}
type FontWeight
    = NormalWeight
    | Bold
    | Faint


{-| Display string with the given [font weight](#FontWeight).
-}
wrapFontWeight : FontWeight -> String -> String
wrapFontWeight weight string =
    String.join ""
        [ setFontWeight weight
        , string
        , setFontWeight NormalWeight
        ]


{-| Change all subsequent terminal output to the given [font weight](#FontWeight).

This will persist even after program exit!
So be sure to call [`unsetFontWeight`](#unsetFontWeight) before exiting.
-}
setFontWeight : FontWeight -> String
setFontWeight weight =
    String.join ""
        [ prefix
        , fontWeightCode weight
        , "m"
        ]


{-| Change all subsequent terminal output to the term default font weight.
-}
unsetFontWeight : String
unsetFontWeight =
    setFontWeight NormalWeight


fontWeightCode : FontWeight -> String
fontWeightCode weight =
    when weight is
        NormalWeight -> "22"
        Bold -> "1"
        Faint -> "2"


{-| Display the given string as italic.
-}
wrapItalic : String -> String
wrapItalic string =
    String.join ""
        [ setItalic
        , string
        , unsetItalic
        ]


{-| Display the given string as underline.
-}
wrapUnderline : String -> String
wrapUnderline string =
    String.join ""
        [ setUnderline
        , string
        , unsetUnderline
        ]


{-| Display the given string with a strikethrough.
-}
wrapStrikeThrough : String -> String
wrapStrikeThrough string =
    String.join ""
        [ setStrikeThrough
        , string
        , unsetStrikeThrough
        ]


{-| Change all terminal output from this point to italic (even after program exit).
-}
setItalic : String
setItalic =
    prefix ++ "3m"


{-| Stop displaying terminal output as italic.
-}
unsetItalic : String
unsetItalic =
    prefix ++ "23m"


{-| Change all terminal output from this point to underline (even after program exit).
-}
setUnderline : String
setUnderline =
    prefix ++ "4m"


{-| Stop displaying terminal output as underline.
-}
unsetUnderline : String
unsetUnderline =
    prefix ++ "24m"


{-| Change all terminal output from this point with a strikethrough (even after program exit).
-}
setStrikeThrough : String
setStrikeThrough =
    prefix ++ "9m"


{-| Stop displaying terminal output with a strikethrough.
-}
unsetStrikeThrough : String
unsetStrikeThrough =
    prefix ++ "29m"


{-| Reset all colors and styles to default.
-}
reset : String
reset =
    prefix ++ "0m"


-- CURSOR


{-| Move the cursor up the given number of lines.
-}
moveUpLines : Int -> String
moveUpLines n =
    if n < 1 then
        ""
    else
        prefix ++ (String.fromInt n) ++ "F"


{-| Move the cursor down the given number of lines.
-}
moveDownLines : Int -> String
moveDownLines n =
    if n < 1 then
        ""
    else
        prefix ++ (String.fromInt n) ++ "E"


{-| Move cursor to the given row and column number of the visible terminal.
-}
moveTo : Int -> Int -> String
moveTo row col =
    String.join ""
        [ prefix
        , String.fromInt row
        , ";"
        , String.fromInt col
        , "H"
        ]


{-| Hide the cursor.

You should call [`showCursor`](#showCursor) before exiting your program, or the
cursor will still be gone after exiting.
-}
hideCursor : String
hideCursor =
    prefix ++ "?25l"


{-| Show the cursor.
-}
showCursor : String
showCursor =
    prefix ++ "?25h"


{-| Get the cursor position.

After sending this sequence to stdout, a new sequence containing the cursor's
column and row will be output. It will look like this: `ESC[n;mR` where
`n` is the row and `m` is the column.

To capture this, you probably want to be in [raw mode](https://packages.gren-lang.org/package/gren-lang/node/latest/module/Terminal#setStdInRawMode),
and be [listening](https://packages.gren-lang.org/package/gren-lang/node/version/3.2.1/module/Stream#listen)
on stdin. [`escape`](#escape) will be helpful here when checking the captured string.

If you're using this in [gren-tui](https://packages.gren-lang.org/package/blaix/gren-tui/version/latest/overview)
you can include it in your `view` (or send it directly to an output stream).
This will trigger an `update` with your `onInput` message
holding a [`CursorReport row column`](https://packages.gren-lang.org/package/blaix/gren-tui/version/latest/module/Tui#Input).
-}
getCursorReport : String
getCursorReport =
    prefix ++ "6n"


-- KEYS


{-| ANSI escape sequence for the up arrow key.
-}
arrowUp : String
arrowUp =
    prefix ++ "A"


{-| ANSI escape sequence for the down arrow key.
-}
arrowDown : String
arrowDown =
    prefix ++ "B"


{-| ANSI escape sequence for the right arrow key.
-}
arrowRight : String
arrowRight =
    prefix ++ "C"


{-| ANSI escape sequence for the left arrow key.
-}
arrowLeft : String
arrowLeft =
    prefix ++ "D"


-- UTIL


{-| Remove ansi sequences from string.
-}
strip : String -> String
strip =
    Regex.replace regex (\_ -> "")


{-| Measures the visible width of a `String` in terminal columns.
-}
width : String -> Int
width str =
    String.foldl widthReducer 0 (strip str)


widthReducer : Char -> Int -> Int
widthReducer char total =
    let
        codePoint =
            Char.toCode char
                -- |> Debug.log "code point"
    in
    if zeroWidth codePoint then
        total
            -- |> Debug.log "zero width"

    -- Strange characters that visually take up slightly more than 1 space,
    -- but spacially only take up a single space.
    else if codePoint >= 0x2631 && codePoint <= 0x2634 then
        total + 1
            -- |> Debug.log "weird hamburgers"

    -- 1-wide stars that would get slurped up in the 2-wide emoji check
    else if codePoint >= 0x2736 && codePoint <= 0x273A then
        total + 1
            -- |> Debug.log "stars"

    -- 1-wide "shogi pieces" that would get picked up in the 2-wide emoji check
    else if codePoint >= 0x2616 && codePoint <= 0x2617 then
        total + 1
            -- |> Debug.log "shogi piece"

    else if isCJK codePoint then
        total + 2
            -- |> Debug.log "cjk"

    else if isEmoji codePoint then
        total + 2
            -- |> Debug.log "emoji"

    else
        total + 1
            -- |> Debug.log "single char"


{-| Matches ANSI characters

Borrowed from <https://github.com/chalk/ansi-regex>

See LICENSE-ansi-regex
-}
regex : Regex
regex =
    [ "[\u{001B}\u{009B}][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\u{0007})"
    , "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"
    ]
        |> String.join "|"
        |> Regex.fromString
        |> Maybe.withDefault Regex.never


-- CODE POINT HELPERS


zeroWidth : Int -> Bool
zeroWidth codePoint =

    -- ASCII control characters
    (codePoint >= 0x0000 && codePoint <= 0x001F) ||

    -- DEL character
    (codePoint == 0x007F) ||

    -- C1 control characters
    (codePoint >= 0x0080 && codePoint <= 0x009F) ||

    -- Unicode format control characters
    (codePoint >= 0x200C && codePoint <= 0x200F) ||
    (codePoint >= 0x2028 && codePoint <= 0x202F) ||
    (codePoint >= 0x2060 && codePoint <= 0x206F) ||

    -- Variation selector for emoji
    codePoint == 0xFE0F ||

    -- Soft hyphen
    codePoint == 0x00AD ||

    -- Grapheme joiner
    codePoint == 0x034F ||

    -- Arabic letter mark
    codePoint == 0x061C ||

    -- Combining mark
    (codePoint >= 0x0300 && codePoint <= 0x036F) ||
    (codePoint >= 0x1AB0 && codePoint <= 0x1AFF) ||
    (codePoint >= 0x1DC0 && codePoint <= 0x1DFF) ||
    (codePoint >= 0x20D0 && codePoint <= 0x20FF) ||
    (codePoint >= 0xFE20 && codePoint <= 0xFE2F)


{-| Chinese, Japanese, Korean characters
-}
isCJK : Int -> Bool
isCJK codePoint =
    (codePoint >= 0x3000 && codePoint <= 0x9FFF) ||
    (codePoint >= 0xF900 && codePoint <= 0xFAFF) ||
    (codePoint >= 0xFF01 && codePoint <= 0xFF60) ||
    (codePoint >= 0xFFE0 && codePoint <= 0xFFE6) ||
    (codePoint >= 0x20000 && codePoint <= 0x2FFFD) ||
    (codePoint >= 0x30000 && codePoint <= 0x3FFFD)


isEmoji : Int -> Bool
isEmoji codePoint =
    -- Miscellaneous Symbols and Pictographs
    (codePoint >= 0x1F300 && codePoint <= 0x1F5FF) ||
    -- Emoticons
    (codePoint >= 0x1F600 && codePoint <= 0x1F64F) ||
    -- Transport and Map Symbols
    (codePoint >= 0x1F680 && codePoint <= 0x1F6FF) ||
    -- Some colorful circles and squares
    (codePoint >= 0x1F7E0 && codePoint <= 0x1F7EB) ||
    -- Supplemental Symbols and Pictographs
    (codePoint >= 0x1F900 && codePoint <= 0x1F9FF) ||
    -- Symbols and Pictographs Extended-A
    (codePoint >= 0x1FA70 && codePoint <= 0x1FAFF) ||
    -- Miscellaneous Symbols
    (codePoint >= 0x2600 && codePoint <= 0x26FF) ||
    -- Dingbats
    (codePoint >= 0x2700 && codePoint <= 0x27BF)
